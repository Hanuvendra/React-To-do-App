{"version":3,"sources":["logo.svg","ListItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","props","listItem","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","filteredItems","filter","class","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,6MCgC5BC,MA3Bf,SAAkBC,GACjB,IACMC,EADQD,EAAME,MACGC,KAAI,SAAAC,GAEzB,OAAS,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACvC,+BAAI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAC/CC,SACC,SAACC,GACAZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QAGvC,8BACA,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,KAAK,QAAQC,QAAU,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAM7F,OACC,6BACA,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC/BlB,K,eCnBHmB,IAAQC,IAAIC,K,IA+EGC,E,kDA5Ed,WAAYvB,GAAO,IAAD,8BACjB,cAAMA,IACDwB,MAAM,CACVtB,MAAM,GACNuB,YAAY,CACXf,KAAK,GACLJ,IAAI,KAGN,EAAKoB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAZA,E,wDAcNf,GACXiB,KAAKC,SAAS,CACbL,YAAY,CACXf,KAAKE,EAAEE,OAAOL,MACdH,IAAIyB,KAAKC,W,8BAIJpB,GACPA,EAAEqB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAE3B,GAAmB,KAAhBS,EAAQxB,KAAW,CAChB,IAAMR,EAAK,sBAAO2B,KAAKL,MAAMtB,OAAlB,CAAyBgC,IACvCL,KAAKC,SAAS,CACZ5B,MAAOA,EACPuB,YAAY,CACVf,KAAK,GACLJ,IAAI,S,iCAKDA,GACV,IAAM6B,EAAgBN,KAAKL,MAAMtB,MAAMkC,QAAO,SAAAhC,GAAI,OAAIA,EAAKE,KAAKA,KAChEuB,KAAKC,SAAS,CACb5B,MAAOiC,M,gCAICzB,EAAKJ,GACd,IAAMJ,EAAQ2B,KAAKL,MAAMtB,MACzBA,EAAMC,KAAI,SAAAC,GACNA,EAAKE,MAAQA,IACfF,EAAKM,KAAKA,MAGZmB,KAAKC,SAAS,CACb5B,MAAMA,M,+BAKN,OACC,6BACA,yBAAKmC,MAAM,QACV,wBAAIA,MAAM,QAAV,cAEA,yBAAKA,MAAM,OACV,gCACC,0BAAM7B,GAAG,aAAa8B,SAAUT,KAAKD,SACpC,2BAAOrB,KAAK,OAAOgC,YAAY,aAAa9B,MAAOoB,KAAKL,MAAMC,YAAYf,KAAMC,SAAUkB,KAAKH,cAC/F,4BAAQnB,KAAK,UAAb,SAGF,kBAAC,EAAD,CAAUL,MAAO2B,KAAKL,MAAMtB,MAAOe,WAAYY,KAAKZ,WAAYJ,UAAWgB,KAAKhB,kB,GAtEpE2B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.30e11930.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './ListItem.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';  \r\n\r\nfunction ListItem(props){\r\n\tconst items = props.items;\r\n\tconst listItem = items.map(item =>\r\n\t\t{\r\n\t\t\treturn ( <div className=\"list\" key={item.key}>\r\n\t\t\t\t\t<p> <input type=\"text\" id={item.key} value={item.text}\r\n\t\t\t\t\t\t\tonChange={\r\n\t\t\t\t\t\t\t\t(e) => {\r\n\t\t\t\t\t\t\t\t\tprops.setUpdate(e.target.value,item.key)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}/>\r\n\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<FontAwesomeIcon className=\"faicons\" icon=\"trash\" onClick={ () => props.deleteItem(item.key)}/>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div> );\r\n\t\t\t\t\r\n\t});\r\n\treturn(\r\n\t\t<div>\r\n\t\t<FlipMove duration={400} easing=\"ease-in-out\">\r\n\t\t{listItem}\r\n\t\t</FlipMove>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItem from './ListItem.js';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\n\nclass App extends React.Component {\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state={\n\t\t\titems:[],\n\t\t\tcurrentItem:{\n\t\t\t\ttext:'',\n\t\t\t\tkey:''\n\t\t\t}\n\t\t}\n\t\tthis.handleInput = this.handleInput.bind(this);\n\t\tthis.addItem = this.addItem.bind(this);\n\t\tthis.deleteItem = this.deleteItem.bind(this);\n\t\tthis.setUpdate = this.setUpdate.bind(this);\n\t}\n\thandleInput(e){\n\t\tthis.setState({\n\t\t\tcurrentItem:{\n\t\t\t\ttext:e.target.value,\n\t\t\t\tkey:Date.now()\n\t\t\t}\n\t\t})\n\t}\n\taddItem(e){\n\t\te.preventDefault();\n\t\tconst newItem = this.state.currentItem;\n\t\t//console.log(newItem);\n\t\tif(newItem.text !==\"\"){\n\t      \tconst items = [...this.state.items, newItem];\n\t    this.setState({\n\t      items: items,\n\t      currentItem:{\n\t        text:'',\n\t        key:''\n\t      }\n\t    })\n\t    }\n\t}\n\tdeleteItem(key){\n\t\tconst filteredItems = this.state.items.filter(item => item.key!=key);\n\t\tthis.setState({\n\t\t\titems: filteredItems\n\t\t})\n\t}\n\n\tsetUpdate(text,key){\n\t\tconst items = this.state.items;\n\t\titems.map(item => {\n\t\t\tif(item.key === key){\n\t\t\t\titem.text=text;\n\t\t\t}\n\t\t})\n\t\tthis.setState({\n\t\t\titems:items\n\t\t})\n\t}\n\n\trender() {\n\t  return (\n\t  \t<div>\n\t  \t<div class=\"head\">\n\t  \t\t<h1 class=\"head\">To-Do App</h1>\n\t  \t</div>\n\t   \t<div class=\"App\">\n\t   \t\t<header>\n\t   \t\t\t<form id=\"to-do-form\" onSubmit={this.addItem}>\n\t   \t\t\t\t<input type=\"text\" placeholder=\"Enter Text\" value={this.state.currentItem.text} onChange={this.handleInput}/>\n\t   \t\t\t\t<button type=\"submit\">Add</button>\n\t   \t\t\t</form>\n\t   \t\t</header>\n\t   \t\t<ListItem items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}></ListItem>\n\t   \t</div>\n\t   \t</div>\n\t  );\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}